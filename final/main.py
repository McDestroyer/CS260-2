from graph import Graph


def main() -> None:
    graph = Graph()
    graph.add_node("A")
    graph.add_node("B")
    graph.add_node("C")
    graph.add_node("D")
    graph.add_node("E")
    graph.add_node("F")
    graph.add_node("G")

    graph.add_edge("A", "B", 1)
    graph.add_edge("B", "C", 2)
    graph.add_edge("C", "A", 3)
    graph.add_edge("A", "D", 4)
    graph.add_edge("D", "E", 5)
    graph.add_edge("E", "F", 6)
    graph.add_edge("F", "G", 7)
    graph.add_edge("G", "A", 8)

    print("Initial graph (format: {'Node': [neighbors]}) =", graph)
    print()
    print("Neighbors of A:", graph.get_neighbors("A"))
    print("Neighbors of B:", graph.get_neighbors("B"))
    print("Neighbors of C:", graph.get_neighbors("C"))
    print()
    print("Weight of edge AB:", graph.get_weight("A", "B"))
    print("Weight of edge BC:", graph.get_weight("B", "C"))
    print("Weight of edge AC:", graph.get_weight("C", "A"))
    print()
    print("Removing node A...")
    graph.remove_node("A")
    print()
    print("Current graph:", graph)
    print()
    print("Neighbors of A:", graph.get_neighbors("A"))
    print("Neighbors of B:", graph.get_neighbors("B"))
    print()
    print("Removing edge BC...")
    graph.remove_edge("B", "C")
    print()
    print("Current graph:", graph)
    print("Neighbors of B:", graph.get_neighbors("B"))
    print()
    print("Adding 3 edges...")
    graph.add_edge("B", "C", 2)
    graph.add_edge("C", "F", 3)
    graph.add_edge("F", "B", 4)
    print()

    print("Current graph:", graph)
    print("Graph is unbroken:", graph.tree_complete())

    print()
    shortest_path = graph.generate_shortest_path("D", "G")
    print(f"The shortest path from {shortest_path[1][0]} to {shortest_path[1][-1]} is {shortest_path[1]}, a path {shortest_path[0]} units long.")
    shortest_path = graph.generate_shortest_path("B", "G")
    print(f"The shortest path from {shortest_path[1][0]} to {shortest_path[1][-1]} is {shortest_path[1]}, a path {shortest_path[0]} units long.")
    shortest_path = graph.generate_shortest_path("B", "D")
    print(f"The shortest path from {shortest_path[1][0]} to {shortest_path[1][-1]} is {shortest_path[1]}, a path {shortest_path[0]} units long.")
    shortest_path = graph.generate_shortest_path("A", "D")
    print(f"The shortest path from A to D is {shortest_path[1]}, a path {shortest_path[0]} units long.")
    shortest_path = graph.generate_shortest_path("B", "B")
    print(f"The shortest path from {shortest_path[1][0]} to {shortest_path[1][-1]} is {shortest_path[1]}, a path {shortest_path[0]} units long.")
    print()

    spanning_tree = graph.generate_minimum_spanning_tree()
    print("Spanning tree:", spanning_tree)
    print()
    print("Removing edge DE...")
    graph.remove_edge("D", "E")
    print()
    spanning_tree = graph.generate_minimum_spanning_tree()
    print("Spanning tree:", spanning_tree[0])
    if len(spanning_tree[1]) > 0:
        print("The tree is not fully connected. This is intended. The following nodes are not connected to the spanning tree:", spanning_tree[1])
    print()
    print("Graph is unbroken:", graph.tree_complete())
    print()
    print("Removing node D...")
    graph.remove_node("D")
    print()
    spanning_tree = graph.generate_minimum_spanning_tree()
    print("Spanning tree:", spanning_tree)


if __name__ == "__main__":
    main()
